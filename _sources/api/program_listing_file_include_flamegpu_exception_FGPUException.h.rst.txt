
.. _program_listing_file_include_flamegpu_exception_FGPUException.h:

Program Listing for File FGPUException.h
========================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_flamegpu_exception_FGPUException.h>` (``include/flamegpu/exception/FGPUException.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef INCLUDE_FLAMEGPU_EXCEPTION_FGPUEXCEPTION_H_
   #define INCLUDE_FLAMEGPU_EXCEPTION_FGPUEXCEPTION_H_
   
   #include <string>
   #include <exception>
   #include <cstdarg>
   #include <cstdio>
   
   #define THROW FGPUException::setLocation(__FILE__, __LINE__); throw
   
   class UnknownError : public std::exception {};
   
   class FGPUException : public std::exception {
    public:
        FGPUException();
        const char *what() const noexcept override;
   
        virtual const char* exception_type() const = 0;
   
        static void setLocation(const char *_file, const unsigned int &_line);
   
    protected:
       static std::string parseArgs(const char * format, va_list argp);
       std::string err_message;
   
    private:
       static const char *file;
       static unsigned int line;
   };
   
   #ifdef _DEBUG
   #define DERIVED_FGPUException(name, default_msg)\
   class name : public FGPUException {\
    public:\
       explicit name(const char *format = default_msg, ...) {\
           va_list argp;\
           va_start(argp, format);\
           err_message += parseArgs(format, argp);\
           va_end(argp);\
           fprintf(stderr, "%s\n", err_message.c_str()); \
       }\
       const char* exception_type() const override {\
           return #name;\
       }\
   }
   #else
   #define DERIVED_FGPUException(name, default_msg)\
   class name : public FGPUException {\
    public:\
       explicit name(const char *format = default_msg, ...) {\
           va_list argp;\
           va_start(argp, format);\
           err_message += parseArgs(format, argp);\
           va_end(argp);\
       }\
       const char* exception_type() const override {\
           return #name;\
       }\
   }
   #endif
   
   
   
   // Derived Classes //
   
   DERIVED_FGPUException(CUDAError, "CUDA returned an error code!");
   
   DERIVED_FGPUException(ReservedName, "Variable names cannot begin with the character '_'.");
   
   DERIVED_FGPUException(InvalidInputFile, "Invalid Input File");
   
   DERIVED_FGPUException(InvalidHashList, "Hash list full. This should never happen");
   
   DERIVED_FGPUException(InvalidVarType, "Bad variable type in agent instance set/get variable");
   
   DERIVED_FGPUException(UnsupportedVarType, "Variables of this type are not supported by function");
   
   DERIVED_FGPUException(InvalidStateName, "Invalid agent state name");
   
   DERIVED_FGPUException(InvalidMapEntry, "Missing entry in type sizes map. Something went bad.");
   
   DERIVED_FGPUException(InvalidParent, "Invalid parent");
   
   DERIVED_FGPUException(InvalidAgentName, "Invalid agent name");
   
   DERIVED_FGPUException(InvalidMessageName, "Invalid message name");
   
   DERIVED_FGPUException(InvalidMessageType, "Invalid message type");
   
   DERIVED_FGPUException(InvalidAgent, "Invalid agent");
   
   DERIVED_FGPUException(InvalidMessage, "Invalid message");
   
   DERIVED_FGPUException(InvalidAgentVar, "Invalid agent memory variable");
   
   DERIVED_FGPUException(InvalidAgentState, "Invalid agent state");
   
   DERIVED_FGPUException(InvalidVarArrayLen, "Length of array variable does not match");
   DERIVED_FGPUException(OutOfRangeVarArray, "Index is out of range of the array variable");
   
   DERIVED_FGPUException(InvalidMessageVar, "Invalid message memory variable");
   
   DERIVED_FGPUException(InvalidMessageData, "Invalid Message data");
   
   DERIVED_FGPUException(InvalidMessageSize, "Invalid Message List size");
   
   DERIVED_FGPUException(InvalidSubModel, "Invalid SubModel");
   DERIVED_FGPUException(InvalidSubModelName, "Invalid SubModel Name, already in use");
   DERIVED_FGPUException(InvalidSubAgentName, "SubAgent name was not recognised");
   DERIVED_FGPUException(InvalidLayerMember, "Layer configuration unsupported");
   
   DERIVED_FGPUException(InvalidCudaAgent, "CUDA agent not found. This should not happen");
   
   DERIVED_FGPUException(InvalidCudaMessage, "CUDA message not found. This should not happen");
   
   DERIVED_FGPUException(InvalidCudaAgentMapSize, "CUDA agent map size is zero");
   
   DERIVED_FGPUException(InvalidCudaAgentDesc, "CUDA Agent uses different agent description");
   
   DERIVED_FGPUException(InvalidCudaAgentState, "The state does not exist within the CUDA agent.");
   
   DERIVED_FGPUException(InvalidAgentFunc, "Unknown agent function");
   
   DERIVED_FGPUException(InvalidFuncLayerIndx, "Agent function layer index out of bounds!");
   
   DERIVED_FGPUException(InvalidPopulationData, "Invalid Population data");
   
   DERIVED_FGPUException(InvalidMemoryCapacity, "Invalid Memory Capacity");
   
   DERIVED_FGPUException(InvalidOperation, "Invalid Operation");
   
   DERIVED_FGPUException(InvalidCUDAdevice, "Invalid CUDA Device");
   
   DERIVED_FGPUException(InvalidCUDAComputeCapability, "Invalid CUDA Device Compute Capability");
   
   DERIVED_FGPUException(InvalidHostFunc, "Invalid Host Function");
   
   DERIVED_FGPUException(InvalidArgument, "Invalid Argument Exception");
   
   DERIVED_FGPUException(DuplicateEnvProperty, "Environment property of same name already exists");
   
   DERIVED_FGPUException(InvalidEnvProperty, "Environment property of name does not exist");
   
   DERIVED_FGPUException(InvalidEnvPropertyType, "Environment property of name does not have same type");
   
   DERIVED_FGPUException(ReadOnlyEnvProperty, "Cannot modify environment properties marked as constant");
   
   DERIVED_FGPUException(EnvDescriptionAlreadyLoaded, "Environment description with same model name already is already loaded.");
   
   DERIVED_FGPUException(OutOfMemory, "Allocation failed, sufficient memory unavailable");
   
   DERIVED_FGPUException(CurveException, "Curve reported an error!");
   
   DERIVED_FGPUException(OutOfBoundsException, "Index exceeds bounds of array!");
   
   DERIVED_FGPUException(TinyXMLError, "TinyXML returned an error code!");
   DERIVED_FGPUException(RapidJSONError, "RapidJSON returned an error code!");
   
   DERIVED_FGPUException(DifferentModel, "Attempted to use member from a different model!");
   
   DERIVED_FGPUException(UnsupportedFileType, "Cannot handle file type.");
   DERIVED_FGPUException(UnknownInternalError, "An unknown error occured within FLAME GPU lib.");
   
   DERIVED_FGPUException(ArrayMessageWriteConflict, "Two messages attempted to write to the same index");
   DERIVED_FGPUException(VisualisationException, "An exception prevented the visualisation from working.");
   DERIVED_FGPUException(ExpiredWeakPtr, "Unable to convert weak pointer to shared pointer.");
   DERIVED_FGPUException(DeviceError, "Error reported from device code");
   DERIVED_FGPUException(VersionMismatch, "Versions do not match");
   DERIVED_FGPUException(InvalidFilePath, "File does not exist.");
   /*
    * Defines an error indicating that a CUDAEventTimer was queried without being synced.
    */
   DERIVED_FGPUException(UnsycnedCUDAEventTimer, "Elapsed time requested for Un-synced CUDAEventTimer");
   /*
    * Defines an error reported by AgentFunctionDependencyGraph if the graph is invalid
    */
   DERIVED_FGPUException(InvalidDependencyGraph, "Agent function dependency graph is invalid");
   DERIVED_FGPUException(AgentIDCollision, "Multiple agents of same type share an ID");
   
   #endif  // INCLUDE_FLAMEGPU_EXCEPTION_FGPUEXCEPTION_H_
