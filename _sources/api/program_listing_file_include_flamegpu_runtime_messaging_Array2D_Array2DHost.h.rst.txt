
.. _program_listing_file_include_flamegpu_runtime_messaging_Array2D_Array2DHost.h:

Program Listing for File Array2DHost.h
======================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_flamegpu_runtime_messaging_Array2D_Array2DHost.h>` (``include/flamegpu/runtime/messaging/Array2D/Array2DHost.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef INCLUDE_FLAMEGPU_RUNTIME_MESSAGING_ARRAY2D_ARRAY2DHOST_H_
   #define INCLUDE_FLAMEGPU_RUNTIME_MESSAGING_ARRAY2D_ARRAY2DHOST_H_
   
   
   #include <string>
   #include <memory>
   #include <array>
   
   #include "flamegpu/model/Variable.h"
   #include "flamegpu/runtime/messaging/Array2D.h"
   #include "flamegpu/runtime/messaging/BruteForce/BruteForceHost.h"
   
   
   class MsgArray2D::CUDAModelHandler : public MsgSpecialisationHandler {
    public:
        explicit CUDAModelHandler(CUDAMessage &a);
       ~CUDAModelHandler() { }
       void init(CUDAScatter &scatter, const unsigned int &streamId) override;
       void buildIndex(CUDAScatter &scatter, const unsigned int &streamId, const cudaStream_t &stream) override;
       void allocateMetaDataDevicePtr() override;
       void freeMetaDataDevicePtr() override;
       const void *getMetaDataDevicePtr() const override { return d_metadata; }
   
    private:
       MetaData hd_metadata;
       MetaData *d_metadata;
       CUDAMessage &sim_message;
       unsigned int *d_write_flag;
       size_type d_write_flag_len;
   };
   
   struct MsgArray2D::Data : public MsgBruteForce::Data {
       friend class ModelDescription;
       friend struct ModelData;
       std::array<size_type, 2> dimensions;
       virtual ~Data() = default;
   
       std::unique_ptr<MsgSpecialisationHandler> getSpecialisationHander(CUDAMessage &owner) const override;
   
       std::type_index getType() const override;
   
    protected:
       Data *clone(const std::shared_ptr<const ModelData> &newParent) override;
       Data(const std::shared_ptr<const ModelData> &, const Data &other);
       Data(const std::shared_ptr<const ModelData> &, const std::string &message_name);
   };
   
   class MsgArray2D::Description : public MsgBruteForce::Description {
       friend struct Data;
   
    protected:
       Description(const std::shared_ptr<const ModelData> & _model, Data *const data);
        Description(const Description &other_message) = delete;
        Description(Description &&other_message) noexcept = delete;
        Description& operator=(const Description &other_message) = delete;
        Description& operator=(Description &&other_message) noexcept = delete;
   
    public:
        void setDimensions(const size_type &len_x, const size_type &len_y);
        void setDimensions(const std::array<size_type, 2> &dims);
   
       std::array<size_type, 2> getDimensions() const;
       size_type getDimX() const;
       size_type getDimY() const;
   };
   
   #endif  // INCLUDE_FLAMEGPU_RUNTIME_MESSAGING_ARRAY2D_ARRAY2DHOST_H_
