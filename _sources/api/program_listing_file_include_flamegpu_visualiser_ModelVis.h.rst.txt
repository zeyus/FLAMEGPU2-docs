
.. _program_listing_file_include_flamegpu_visualiser_ModelVis.h:

Program Listing for File ModelVis.h
===================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_flamegpu_visualiser_ModelVis.h>` (``include/flamegpu/visualiser/ModelVis.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef INCLUDE_FLAMEGPU_VISUALISER_MODELVIS_H_
   #define INCLUDE_FLAMEGPU_VISUALISER_MODELVIS_H_
   #ifdef VISUALISATION
   
   #include <string>
   #include <unordered_map>
   #include <thread>
   #include <memory>
   #include <climits>
   
   // @todo - All vis headers should live in the vis repo.
   #include "flamegpu/visualiser/AgentVis.h"
   #include "flamegpu/visualiser/StaticModelVis.h"
   #include "flamegpu/visualiser/LineVis.h"
   #include "flamegpu/visualiser/color/AutoPalette.h"
   #include "flamegpu/visualiser/config/ModelConfig.h"
   
   namespace flamegpu {
   
   struct ModelData;
   class CUDASimulation;
   class FLAMEGPU_Visualisation;
   
   namespace visualiser {
   
   class ModelVis {
    public:
       explicit ModelVis(const flamegpu::CUDASimulation &model/*TBD*/);
       ~ModelVis();
       void setAutoPalette(const Palette &palette);
       void clearAutoPalette();
       AgentVis &addAgent(const std::string &agent_name);
       AgentVis &Agent(const std::string &agent_name);
       void setWindowTitle(const std::string &title);
       void setWindowDimensions(const unsigned int& width, const unsigned int& height);
       void setClearColor(const float& red, const float& green, const float& blue);
       void setFPSVisible(const bool& showFPS);
       void setFPSColor(const float& red, const float& green, const float& blue);
       void setInitialCameraLocation(const float &x, const float &y, const float &z);
       void setInitialCameraTarget(const float &x, const float &y, const float &z);
       void setCameraSpeed(const float &speed, const float &shiftMultiplier = 5.0f);
   
       void setViewClips(const float &nearClip, const float &farClip);
       void setStepVisible(const bool& showStep);
       void setSimulationSpeed(const unsigned int& stepsPerSecond);
       void setBeginPaused(const bool& beginPaused);
       StaticModelVis addStaticModel(const std::string &modelPath, const std::string &texturePath = "");
       LineVis newLineSketch(float r, float g, float b, float a = 1.0f);
       LineVis newPolylineSketch(float r, float g, float b, float a = 1.0f);
       void activate() {
   #ifdef SWIG
           modelCfg.isPython = true;
   #endif
           _activate();
       }
       void deactivate();
       void join();
       bool isRunning() const;
       void updateBuffers(const unsigned int &sc = UINT_MAX);
   
    private:
       void _activate();
       ModelConfig modelCfg;
       std::shared_ptr<AutoPalette> autoPalette;
       std::unordered_map<std::string, AgentVis> agents;
       const CUDASimulation &model;
       const ModelData &modelData;
       std::unique_ptr<FLAMEGPU_Visualisation> visualiser;
   };
   
   }  // namespace visualiser
   }  // namespace flamegpu
   
   #endif  // VISUALISATION
   #endif  // INCLUDE_FLAMEGPU_VISUALISER_MODELVIS_H_
