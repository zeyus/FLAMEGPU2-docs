
.. _program_listing_file_include_flamegpu_util_CUDAEventTimer.cuh:

Program Listing for File CUDAEventTimer.cuh
===========================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_flamegpu_util_CUDAEventTimer.cuh>` (``include/flamegpu/util/CUDAEventTimer.cuh``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef INCLUDE_FLAMEGPU_UTIL_CUDAEVENTTIMER_CUH_
   #define INCLUDE_FLAMEGPU_UTIL_CUDAEVENTTIMER_CUH_
   
   #include "flamegpu/exception/FGPUException.h"
   #include "flamegpu/gpu/CUDAErrorChecking.h"
   
   namespace util {
   
   class CUDAEventTimer {
    public:
       CUDAEventTimer() :
       startEvent(NULL),
       stopEvent(NULL),
       ms(0.),
       synced(false) {
           gpuErrchk(cudaEventCreate(&this->startEvent));
           gpuErrchk(cudaEventCreate(&this->stopEvent));
       }
       ~CUDAEventTimer() {
           gpuErrchk(cudaEventDestroy(this->startEvent));
           gpuErrchk(cudaEventDestroy(this->stopEvent));
           this->startEvent = NULL;
           this->startEvent = NULL;
       }
       void start() {
           gpuErrchk(cudaEventRecord(this->startEvent));
           synced = false;
       }
       void stop() {
           gpuErrchk(cudaEventRecord(this->stopEvent));
           synced = false;
       }
       float sync() {
           gpuErrchk(cudaEventSynchronize(this->stopEvent));
           gpuErrchk(cudaEventElapsedTime(&this->ms, this->startEvent, this->stopEvent));
           synced = true;
           return ms;
       }
       float getElapsedMilliseconds() {
           if (!synced) {
               THROW UnsycnedCUDAEventTimer();
           }
           return ms;
       }
   
    private:
       cudaEvent_t startEvent;
       cudaEvent_t stopEvent;
       float ms;
       bool synced;
   };
   
   }  // namespace util
   #endif  // INCLUDE_FLAMEGPU_UTIL_CUDAEVENTTIMER_CUH_
