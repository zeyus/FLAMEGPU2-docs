
.. _program_listing_file_src_flamegpu_model_DependencyNode.cpp:

Program Listing for File DependencyNode.cpp
===========================================

|exhale_lsh| :ref:`Return to documentation for file <file_src_flamegpu_model_DependencyNode.cpp>` (``src/flamegpu/model/DependencyNode.cpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #include <iostream>
   #include <string>
   
   #include "flamegpu/model/DependencyNode.h"
   
   #include "flamegpu/model/AgentFunctionDescription.h"
   
   namespace flamegpu {
   
   DependencyNode::~DependencyNode() {
   }
   
   bool DependencyNode::hasDependents() const {
       return dependents.size() != 0;
   }
   const std::vector<DependencyNode*> DependencyNode::getDependents() const {
       return dependents;
   }
   bool DependencyNode::hasDependencies() const {
       return dependencies.size() != 0;
   }
   const std::vector<DependencyNode*> DependencyNode::getDependencies() const {
       return dependencies;
   }
   
   void DependencyNode::setMinimumLayerDepth(const int _minLayerDepth) {
       this->minLayerDepth = _minLayerDepth;
   }
   
   int DependencyNode::getMinimumLayerDepth() {
       return minLayerDepth;
   }
   
   void DependencyNode::dependsOnImpl(DependencyNode& dependency) {
       if (auto thisAsAFD = dynamic_cast<AgentFunctionDescription*>(this)) {
           if (auto depAsAFD = dynamic_cast<AgentFunctionDescription*>(&dependency)) {
               if (thisAsAFD->model.expired() || !(thisAsAFD->model.lock() == depAsAFD->model.lock())) {
                   THROW exception::InvalidDependencyGraph("Attempting to add two agent functions from different models to dependency graph!");
               }
           }
       }
       dependency.addDependent(*this);
       dependencies.push_back(&dependency);
   }
   
   void DependencyNode::addDependent(DependencyNode& dependent) {
       dependents.push_back(&dependent);
   }
   
   }  // namespace flamegpu
