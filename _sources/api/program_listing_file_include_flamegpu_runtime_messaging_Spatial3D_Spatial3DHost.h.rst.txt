
.. _program_listing_file_include_flamegpu_runtime_messaging_Spatial3D_Spatial3DHost.h:

Program Listing for File Spatial3DHost.h
========================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_flamegpu_runtime_messaging_Spatial3D_Spatial3DHost.h>` (``include/flamegpu/runtime/messaging/Spatial3D/Spatial3DHost.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef INCLUDE_FLAMEGPU_RUNTIME_MESSAGING_SPATIAL3D_SPATIAL3DHOST_H_
   #define INCLUDE_FLAMEGPU_RUNTIME_MESSAGING_SPATIAL3D_SPATIAL3DHOST_H_
   
   #include <memory>
   #include <string>
   
   #include "flamegpu/gpu/CUDAMessage.h"
   #include "flamegpu/runtime/cuRVE/curve.h"
   #include "flamegpu/util/nvtx.h"
   #include "flamegpu/runtime/messaging/Spatial3D.h"
   #include "flamegpu/runtime/messaging/Spatial2D/Spatial2DHost.h"
   #include "flamegpu/runtime/messaging/BruteForce/BruteForceHost.h"
   
   class MsgSpatial3D::CUDAModelHandler : public MsgSpecialisationHandler {
    public:
        explicit CUDAModelHandler(CUDAMessage& a);
       ~CUDAModelHandler() override { }
       void init(CUDAScatter &scatter, const unsigned int &streamId) override;
       void buildIndex(CUDAScatter &scatter, const unsigned int &streamId, const cudaStream_t &stream) override;
       void allocateMetaDataDevicePtr() override;
       void freeMetaDataDevicePtr() override;
       const void *getMetaDataDevicePtr() const override { return d_data; }
   
    private:
       void resizeCubTemp();
       void resizeKeysVals(const unsigned int &newSize);
       unsigned int binCount = 0;
       size_t d_CUB_temp_storage_bytes = 0;
       unsigned int *d_CUB_temp_storage = nullptr;
       unsigned int *d_histogram = nullptr;
       unsigned int *d_keys = nullptr, *d_vals = nullptr;
       size_t d_keys_vals_storage_bytes = 0;
       MetaData hd_data;
       MetaData *d_data = nullptr;
       CUDAMessage &sim_message;
   };
   
   struct MsgSpatial3D::Data : public MsgSpatial2D::Data {
       friend class ModelDescription;
       friend struct ModelData;
       float minZ;
       float maxZ;
       virtual ~Data() = default;
   
       std::unique_ptr<MsgSpecialisationHandler> getSpecialisationHander(CUDAMessage &owner) const override;
   
       std::type_index getType() const override;
   
    protected:
       Data *clone(const std::shared_ptr<const ModelData> &newParent) override;
       Data(const std::shared_ptr<const ModelData> &, const Data &other);
       Data(const std::shared_ptr<const ModelData> &, const std::string &message_name);
   };
   
   class MsgSpatial3D::Description : public MsgBruteForce::Description {
       friend struct Data;
   
    protected:
       Description(const std::shared_ptr<const ModelData> &_model, Data *const data);
       Description(const Description &other_message) = delete;
       Description(Description &&other_message) noexcept = delete;
       Description& operator=(const Description &other_message) = delete;
       Description& operator=(Description &&other_message) noexcept = delete;
   
    public:
       void setRadius(const float &r);
       void setMinX(const float &x);
       void setMinY(const float &y);
       void setMinZ(const float &z);
       void setMin(const float &x, const float &y, const float &z);
       void setMaxX(const float &x);
       void setMaxY(const float &y);
       void setMaxZ(const float &z);
       void setMax(const float &x, const float &y, const float &z);
   
       float getRadius() const;
       float getMinX() const;
       float getMinY() const;
       float getMinZ() const;
       float getMaxX() const;
       float getMaxY() const;
       float getMaxZ() const;
   };
   
   #endif  // INCLUDE_FLAMEGPU_RUNTIME_MESSAGING_SPATIAL3D_SPATIAL3DHOST_H_
