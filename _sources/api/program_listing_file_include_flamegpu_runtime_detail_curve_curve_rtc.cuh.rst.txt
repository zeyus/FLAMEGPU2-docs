
.. _program_listing_file_include_flamegpu_runtime_detail_curve_curve_rtc.cuh:

Program Listing for File curve_rtc.cuh
======================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_flamegpu_runtime_detail_curve_curve_rtc.cuh>` (``include/flamegpu/runtime/detail/curve/curve_rtc.cuh``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef INCLUDE_FLAMEGPU_RUNTIME_DETAIL_CURVE_CURVE_RTC_CUH_
   #define INCLUDE_FLAMEGPU_RUNTIME_DETAIL_CURVE_CURVE_RTC_CUH_
   
   #include <cstring>
   #include <string>
   #include <cstdio>
   #include <typeindex>
   #include <map>
   
   namespace jitify {
   namespace experimental {
   class KernelInstantiation;
   }  // namespace experimental
   }  // namespace jitify
   namespace flamegpu {
   namespace detail {
   namespace curve {
   
   
   class CurveRTCHost {
    public:
       CurveRTCHost();
       ~CurveRTCHost();
       void registerAgentVariable(const char* variableName, const char* type, size_t type_size, unsigned int elements = 1, bool read = true, bool write = true);
       void registerMessageOutVariable(const char* variableName, const char* type, size_t type_size, unsigned int elements = 1, bool read = true, bool write = true);
       void registerMessageInVariable(const char* variableName, const char* type, size_t type_size, unsigned int elements = 1, bool read = true, bool write = true);
       void registerNewAgentVariable(const char* variableName, const char* type, size_t type_size, unsigned int elements = 1, bool read = true, bool write = true);
   
       void unregisterAgentVariable(const char* variableName);
       void unregisterMessageOutVariable(const char* variableName);
       void unregisterMessageInVariable(const char* variableName);
       void unregisterNewAgentVariable(const char* variableName);
       void* getAgentVariableCachePtr(const char* variableName);
       void* getMessageOutVariableCachePtr(const char* variableName);
       void* getMessageInVariableCachePtr(const char* variableName);
       void* getNewAgentVariableCachePtr(const char* variableName);
       void registerEnvVariable(const char* propertyName, ptrdiff_t offset, const char* type, size_t type_size, unsigned int elements = 1);
       void unregisterEnvVariable(const char* propertyName);
       std::string getDynamicHeader();
       static std::string getVariableSymbolName();
   
       static std::string demangle(const char* verbose_name);
   
       static std::string demangle(const std::type_index& type);
       void updateEnvCache(const char* env_ptr);
       void updateDevice(const jitify::experimental::KernelInstantiation& instance);
   
    protected:
       void setHeaderPlaceholder(std::string placeholder, std::string dst);
       struct RTCVariableProperties {
           std::string type;
           bool read;
           bool write;
           unsigned int elements;
           size_t type_size;
           void *h_data_ptr;
       };
       struct RTCEnvVariableProperties {
           std::string type;
           unsigned int elements;
           ptrdiff_t offset;
           size_t type_size;
       };
   
    private:
       void initHeaderEnvironment();
       void initHeaderSetters();
       void initHeaderGetters();
       void initDataBuffer();
       std::string header;
       static const char* curve_rtc_dynamic_h_template;
       size_t agent_data_offset = 0;
       size_t messageOut_data_offset = 0;
       size_t messageIn_data_offset = 0;
       size_t newAgent_data_offset = 0;
       size_t data_buffer_size = 0;
       char * h_data_buffer = nullptr;
       std::map<std::string, RTCVariableProperties> agent_variables;
       std::map<std::string, RTCVariableProperties> messageOut_variables;
       std::map<std::string, RTCVariableProperties> messageIn_variables;
       std::map<std::string, RTCVariableProperties> newAgent_variables;
       std::map<std::string, RTCEnvVariableProperties> RTCEnvVariables;
   };
   
   }  // namespace curve
   }  // namespace detail
   }  // namespace flamegpu
   
   #endif  // INCLUDE_FLAMEGPU_RUNTIME_DETAIL_CURVE_CURVE_RTC_CUH_
