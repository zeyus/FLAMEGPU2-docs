
.. _program_listing_file_include_flamegpu_sim_LoggingConfig.h:

Program Listing for File LoggingConfig.h
========================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_flamegpu_sim_LoggingConfig.h>` (``include/flamegpu/sim/LoggingConfig.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef INCLUDE_FLAMEGPU_SIM_LOGGINGCONFIG_H_
   #define INCLUDE_FLAMEGPU_SIM_LOGGINGCONFIG_H_
   
   #include <string>
   #include <map>
   #include <set>
   #include <utility>
   #include <memory>
   
   #include "flamegpu/runtime/HostAgentAPI.h"
   #include "flamegpu/model/ModelData.h"
   #include "flamegpu/gpu/CUDAEnsemble.h"
   
   class AgentLoggingConfig;
   
   class LoggingConfig {
       friend class AgentLoggingConfig;
       // friend void CUDASimulation::setStepLog(const StepLoggingConfig &);
       // friend void CUDASimulation::setExitLog(const LoggingConfig &);
       friend void CUDAEnsemble::setStepLog(const StepLoggingConfig &);
       friend void CUDAEnsemble::setExitLog(const LoggingConfig &);
       friend class CUDASimulation;
   
    public:
       enum Reduction{ Mean, StandardDev, Min, Max, Sum };
       static constexpr const char *toString(const Reduction &r) {
           switch (r) {
           case Mean: return "mean";
           case StandardDev:  return "standard_deviation";;
           case Min: return "min";
           case Max: return "max";
           case Sum: return "sum";
           default: return "unknown";
           }
       }
       typedef std::pair<std::string, std::string> NameStatePair;
       typedef Any (ReductionFn)(HostAgentAPI &ai, const std::string &variable_name);
       struct NameReductionFn {
           std::string name;
           Reduction reduction;
           ReductionFn *function;
           bool operator<(const NameReductionFn &other) const {
               if (name == other.name) {
                   return reduction < other.reduction;
               }
               return name < other.name;
           }
       };
       explicit LoggingConfig(const ModelDescription &model);
       explicit LoggingConfig(const ModelData &model);
       explicit LoggingConfig(const LoggingConfig &other);
       AgentLoggingConfig agent(const std::string &agent_name, const std::string &agent_state = ModelData::DEFAULT_STATE);
       void logEnvironment(const std::string &property_name);
   
    private:
       std::shared_ptr<const ModelData> model;
       std::set<std::string> environment;
       std::map<NameStatePair, std::pair<std::shared_ptr<std::set<NameReductionFn>>, bool>> agents;
   };
   
   class StepLoggingConfig : public LoggingConfig {
       friend class CUDASimulation;
    public:
       explicit StepLoggingConfig(const ModelDescription &model);
       explicit StepLoggingConfig(const ModelData &model);
       explicit StepLoggingConfig(const StepLoggingConfig &model);
       explicit StepLoggingConfig(const LoggingConfig &model);
       void setFrequency(const unsigned int &steps);
   
    private:
       unsigned int frequency;
   };
   
   #endif  // INCLUDE_FLAMEGPU_SIM_LOGGINGCONFIG_H_
