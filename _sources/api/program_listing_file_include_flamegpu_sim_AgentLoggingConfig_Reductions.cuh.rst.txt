
.. _program_listing_file_include_flamegpu_sim_AgentLoggingConfig_Reductions.cuh:

Program Listing for File AgentLoggingConfig_Reductions.cuh
==========================================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_flamegpu_sim_AgentLoggingConfig_Reductions.cuh>` (``include/flamegpu/sim/AgentLoggingConfig_Reductions.cuh``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef INCLUDE_FLAMEGPU_SIM_AGENTLOGGINGCONFIG_REDUCTIONS_CUH_
   #define INCLUDE_FLAMEGPU_SIM_AGENTLOGGINGCONFIG_REDUCTIONS_CUH_
   
   #include <functional>
   
   namespace flamegpu {
   namespace detail {
   
   struct standard_deviation_add_impl {
    public:
       template <typename OutT>
       struct binary_function {
           __device__ __forceinline__ OutT operator()(const OutT &a, const OutT &b) const;
       };
   };
   struct standard_deviation_subtract_mean_impl {
    public:
       template<typename InT, typename OutT>
       struct unary_function {
           __host__ __device__ OutT operator()(const InT &a) const;
       };
   };
   extern __constant__ double STANDARD_DEVIATION_MEAN;
   extern std::mutex STANDARD_DEVIATION_MEAN_mutex;
   extern standard_deviation_add_impl standard_deviation_add;
   extern standard_deviation_subtract_mean_impl standard_deviation_subtract_mean;
   template <typename OutT>
   __device__ __forceinline__ OutT standard_deviation_add_impl::binary_function<OutT>::operator()(const OutT & a, const OutT & b) const {
       return a + b;
   }
   template<typename InT, typename OutT>
   __device__ __forceinline__ OutT standard_deviation_subtract_mean_impl::unary_function<InT, OutT>::operator()(const InT &a) const {
       return pow(a - detail::STANDARD_DEVIATION_MEAN, 2.0);
   }
   
   }  // namespace detail
   
   template <typename T> struct sum_input_t;
   template <> struct sum_input_t<float> { typedef double result_t; };
   template <> struct sum_input_t<double> { typedef double result_t; };
   template <> struct sum_input_t<char> { typedef uint64_t result_t; };
   template <> struct sum_input_t<uint8_t> { typedef uint64_t result_t; };
   template <> struct sum_input_t<uint16_t> { typedef uint64_t result_t; };
   template <> struct sum_input_t<uint32_t> { typedef uint64_t result_t; };
   template <> struct sum_input_t<uint64_t> { typedef uint64_t result_t; };
   template <> struct sum_input_t<int8_t> { typedef int64_t result_t; };
   template <> struct sum_input_t<int16_t> { typedef int64_t result_t; };
   template <> struct sum_input_t<int32_t> { typedef int64_t result_t; };
   template <> struct sum_input_t<int64_t> { typedef int64_t result_t; };
   template <typename T> struct sum_input_t { typedef T result_t; };
   
   }  // namespace flamegpu
   
   #endif  // INCLUDE_FLAMEGPU_SIM_AGENTLOGGINGCONFIG_REDUCTIONS_CUH_
