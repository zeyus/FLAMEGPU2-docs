
.. _program_listing_file_include_flamegpu_runtime_DeviceAPI.h:

Program Listing for File DeviceAPI.h
====================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_flamegpu_runtime_DeviceAPI.h>` (``include/flamegpu/runtime/DeviceAPI.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef INCLUDE_FLAMEGPU_RUNTIME_DEVICEAPI_H_
   #define INCLUDE_FLAMEGPU_RUNTIME_DEVICEAPI_H_
   
   
   #include <cassert>
   #include <cstdint>
   #include <limits>
   
   // #include "flamegpu/gpu/CUDAErrorChecking.h"            // required for CUDA error handling functions
   #ifndef __CUDACC_RTC__
   #include "flamegpu/runtime/cuRVE/curve.h"
   #else
   #include "dynamic/curve_rtc_dynamic.h"
   #endif  // !_RTC
   // #include "flamegpu/exception/FGPUException.h"
   #include "flamegpu/runtime/utility/AgentRandom.cuh"
   #include "flamegpu/runtime/utility/DeviceEnvironment.cuh"
   #include "flamegpu/gpu/CUDAScanCompaction.h"
   #include "flamegpu/runtime/AgentFunction.h"
   #include "flamegpu/runtime/AgentFunctionCondition.h"
   #include "flamegpu/runtime/messaging_device.h"
   #include "flamegpu/defines.h"
   
   class ReadOnlyDeviceAPI {
       // Friends have access to TID() & TS_ID()
       template<typename AgentFunctionCondition>
       friend __global__ void agent_function_condition_wrapper(
   #if !defined(SEATBELTS) || SEATBELTS
           DeviceExceptionBuffer *error_buffer,
   #endif
           Curve::NamespaceHash,
           Curve::NamespaceHash,
           const unsigned int,
           curandState *,
           unsigned int *);
   
    public:
       __device__ ReadOnlyDeviceAPI(
           const Curve::NamespaceHash &instance_id_hash,
           const Curve::NamespaceHash &agentfuncname_hash,
           curandState *&d_rng)
           : random(AgentRandom(&d_rng[getThreadIndex()]))
           , environment(DeviceEnvironment(instance_id_hash))
           , agent_func_name_hash(agentfuncname_hash) { }
       template<typename T, unsigned int N> __device__
       T getVariable(const char(&variable_name)[N]);
       template<typename T, unsigned int N, unsigned int M> __device__
       T getVariable(const char(&variable_name)[M], const unsigned int &index);
       __device__ id_t getID() {
           return getVariable<id_t>("_id");
       }
   
       const AgentRandom random;
       const DeviceEnvironment environment;
   
       __forceinline__ __device__ unsigned int getStepCounter() const {
           return environment.getProperty<unsigned int>("_stepCount");
       }
   
       __forceinline__ __device__ static unsigned int getThreadIndex() {
           /*
           // 3D version
           auto blockId = blockIdx.x + blockIdx.y * gridDim.x
           + gridDim.x * gridDim.y * blockIdx.z;
           auto threadId = blockId * (blockDim.x * blockDim.y * blockDim.z)
           + (threadIdx.z * (blockDim.x * blockDim.y))
           + (threadIdx.y * blockDim.x)
           + threadIdx.x;
           return threadId;*/
   #ifdef SEATBELTS
           assert(blockDim.y == 1);
           assert(blockDim.z == 1);
           assert(gridDim.y == 1);
           assert(gridDim.z == 1);
   #endif
           return blockIdx.x * blockDim.x + threadIdx.x;
       }
   
    protected:
       Curve::NamespaceHash agent_func_name_hash;
   };
   
   template<typename MsgIn, typename MsgOut>
   class DeviceAPI : public ReadOnlyDeviceAPI{
       // Friends have access to TID() & TS_ID()
       template<typename AgentFunction, typename _MsgIn, typename _MsgOut>
       friend __global__ void agent_function_wrapper(
   #if !defined(SEATBELTS) || SEATBELTS
           DeviceExceptionBuffer *error_buffer,
   #endif
           Curve::NamespaceHash,
           Curve::NamespaceHash,
           Curve::NamespaceHash,
           Curve::NamespaceHash,
           Curve::NamespaceHash,
           id_t*,
           const unsigned int,
           const void *,
           const void *,
           curandState *,
           unsigned int *,
           unsigned int *,
           unsigned int *);
   
    public:
       class AgentOut {
        public:
           __device__ AgentOut(const Curve::NamespaceHash &aoh, id_t *&d_agent_output_nextID, unsigned int *&scan_flag_agentOutput)
               : agent_output_hash(aoh)
               , scan_flag(scan_flag_agentOutput)
               , nextID(d_agent_output_nextID) { }
           template<typename T, unsigned int N>
           __device__ void setVariable(const char(&variable_name)[N], T value) const;
           template<typename T, unsigned int N, unsigned int M>
           __device__ void setVariable(const char(&variable_name)[M], const unsigned int &index, T value) const;
           __device__ id_t getID() const;
   
        private:
           __device__ void genID() const;
           const Curve::NamespaceHash agent_output_hash;
           unsigned int* const scan_flag;
           mutable id_t id = ID_NOT_SET;
           id_t *nextID;
       };
       __device__ DeviceAPI(
           const Curve::NamespaceHash &instance_id_hash,
           const Curve::NamespaceHash &agentfuncname_hash,
           const Curve::NamespaceHash &_agent_output_hash,
           id_t *&d_agent_output_nextID,
           curandState *&d_rng,
           unsigned int *&scanFlag_agentOutput,
           typename MsgIn::In &&msg_in,
           typename MsgOut::Out &&msg_out)
           : ReadOnlyDeviceAPI(instance_id_hash, agentfuncname_hash, d_rng)
           , message_in(msg_in)
           , message_out(msg_out)
           , agent_out(AgentOut(_agent_output_hash, d_agent_output_nextID, scanFlag_agentOutput))
       { }
       template<typename T, unsigned int N>
       __device__ void setVariable(const char(&variable_name)[N], T value);
       template<typename T, unsigned int N, unsigned int M>
       __device__ void setVariable(const char(&variable_name)[M], const unsigned int &index, const T &value);
   
       const typename MsgIn::In message_in;
       const typename MsgOut::Out message_out;
       const AgentOut agent_out;
   };
   
   
   /******************************************************************************************************* Implementation ********************************************************/
   
   template<typename T, unsigned int N>
   __device__ T ReadOnlyDeviceAPI::getVariable(const char(&variable_name)[N]) {
       // simple indexing assumes index is the thread number (this may change later)
       const unsigned int index = (blockDim.x * blockIdx.x) + threadIdx.x;
   
       // get the value from curve
       T value = Curve::getAgentVariable<T>(variable_name, agent_func_name_hash , index);
   
       // return the variable from curve
       return value;
   }
   
   template<typename MsgIn, typename MsgOut>
   template<typename T, unsigned int N>
   __device__ void DeviceAPI<MsgIn, MsgOut>::setVariable(const char(&variable_name)[N], T value) {
       if (variable_name[0] == '_') {
           return;  // Fail silently
       }
       // simple indexing assumes index is the thread number (this may change later)
       const unsigned int index = (blockDim.x * blockIdx.x) + threadIdx.x;
       // set the variable using curve
       Curve::setAgentVariable<T>(variable_name, agent_func_name_hash,  value, index);
   }
   template<typename T, unsigned int N, unsigned int M>
   __device__ T ReadOnlyDeviceAPI::getVariable(const char(&variable_name)[M], const unsigned int &array_index) {
       // simple indexing assumes index is the thread number (this may change later)
       const unsigned int index = (blockDim.x * blockIdx.x) + threadIdx.x;
   
       // get the value from curve
       T value = Curve::getAgentArrayVariable<T, N>(variable_name, agent_func_name_hash , index, array_index);
   
       // return the variable from curve
       return value;
   }
   
   template<typename MsgIn, typename MsgOut>
   template<typename T, unsigned int N, unsigned int M>
   __device__ void DeviceAPI<MsgIn, MsgOut>::setVariable(const char(&variable_name)[M], const unsigned int &array_index, const T &value) {
       if (variable_name[0] == '_') {
           return;  // Fail silently
       }
       // simple indexing assumes index is the thread number (this may change later)
       const unsigned int index = (blockDim.x * blockIdx.x) + threadIdx.x;
   
       // set the variable using curve
       Curve::setAgentArrayVariable<T, N>(variable_name , agent_func_name_hash,  value, index, array_index);
   }
   
   template<typename MsgIn, typename MsgOut>
   template<typename T, unsigned int N>
   __device__ void DeviceAPI<MsgIn, MsgOut>::AgentOut::setVariable(const char(&variable_name)[N], T value) const {
       if (agent_output_hash) {
           if (variable_name[0] == '_') {
               return;  // Fail silently
           }
           if (agent_output_hash) {
               // simple indexing assumes index is the thread number (this may change later)
               const unsigned int index = (blockDim.x * blockIdx.x) + threadIdx.x;
   
               // set the variable using curve
               Curve::setNewAgentVariable<T>(variable_name, agent_output_hash, value, index);
   
               // Mark scan flag
               genID();
           }
   #if !defined(SEATBELTS) || SEATBELTS
       } else {
           DTHROW("Agent output must be enabled per agent function when defining the model.\n");
   #endif
       }
   }
   template<typename MsgIn, typename MsgOut>
   template<typename T, unsigned int N, unsigned int M>
   __device__ void DeviceAPI<MsgIn, MsgOut>::AgentOut::setVariable(const char(&variable_name)[M], const unsigned int &array_index, T value) const {
       if (agent_output_hash) {
           if (variable_name[0] == '_') {
               return;  // Fail silently
           }
           // simple indexing assumes index is the thread number (this may change later)
           const unsigned int index = (blockDim.x * blockIdx.x) + threadIdx.x;
   
           // set the variable using curve
           Curve::setNewAgentArrayVariable<T, N>(variable_name, agent_output_hash, value, index, array_index);
   
           // Mark scan flag
           genID();
   #if !defined(SEATBELTS) || SEATBELTS
       } else {
           DTHROW("Agent output must be enabled per agent function when defining the model.\n");
   #endif
       }
   }
   
   template<typename MsgIn, typename MsgOut>
   __device__ id_t DeviceAPI<MsgIn, MsgOut>::AgentOut::getID() const {
       if (agent_output_hash) {
           genID();
           return this->id;
       }
   #if !defined(SEATBELTS) || SEATBELTS
       DTHROW("Agent output must be enabled per agent function when defining the model.\n");
   #endif
       return ID_NOT_SET;
   }
   #ifdef __CUDACC__
   template<typename MsgIn, typename MsgOut>
   __device__ void DeviceAPI<MsgIn, MsgOut>::AgentOut::genID() const {
       // Only assign id and scan flag once
       if (this->id == ID_NOT_SET) {
           this->id = atomicInc(this->nextID, std::numeric_limits<id_t>().max());
           const unsigned int index = (blockDim.x * blockIdx.x) + threadIdx.x;
           Curve::setNewAgentVariable<id_t>("_id", agent_output_hash, this->id, index);  // Can't use ID_VARIABLE_NAME inline, as it isn't of char[N] type
           this->scan_flag[index] = 1;
       }
   }
   #endif
   
   #endif  // INCLUDE_FLAMEGPU_RUNTIME_DEVICEAPI_H_
