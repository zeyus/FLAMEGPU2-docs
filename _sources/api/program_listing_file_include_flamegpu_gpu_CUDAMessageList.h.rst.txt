
.. _program_listing_file_include_flamegpu_gpu_CUDAMessageList.h:

Program Listing for File CUDAMessageList.h
==========================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_flamegpu_gpu_CUDAMessageList.h>` (``include/flamegpu/gpu/CUDAMessageList.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef INCLUDE_FLAMEGPU_GPU_CUDAMESSAGELIST_H_
   #define INCLUDE_FLAMEGPU_GPU_CUDAMESSAGELIST_H_
   
   #include <string>
   #include <map>
   #include <utility>
   
   namespace flamegpu {
   
   class CUDAScatter;
   class CUDAMessage;
   
   typedef std::map <std::string, void*> CUDAMessageMap;
   typedef std::pair <std::string, void*> CUDAMessageMapPair;
   
   class CUDAMessageList {
    public:
       explicit CUDAMessageList(CUDAMessage& cuda_message, CUDAScatter &scatter, const unsigned int &streamId);
       virtual ~CUDAMessageList();
   
       void cleanupAllocatedData();
       void* getReadMessageListVariablePointer(std::string variable_name);
       void* getWriteMessageListVariablePointer(std::string variable_name);
   
       void zeroMessageData();
       virtual void swap();
       virtual unsigned int scatter(const unsigned int &newCount, CUDAScatter &scatter, const unsigned int &streamId, const bool &append);
       virtual unsigned int scatterAll(const unsigned int &newCount, CUDAScatter &scatter, const unsigned int &streamId);
       const CUDAMessageMap &getReadList() { return d_list; }
       const CUDAMessageMap &getWriteList() { return d_swap_list; }
   
    protected:
        void allocateDeviceMessageList(CUDAMessageMap &memory_map);
        void releaseDeviceMessageList(CUDAMessageMap &memory_map);
        void zeroDeviceMessageList(CUDAMessageMap &memory_map);
   
    private:
       CUDAMessageMap d_list;
       CUDAMessageMap d_swap_list;
       const CUDAMessage& message;
   };
   
   }  // namespace flamegpu
   
   #endif  // INCLUDE_FLAMEGPU_GPU_CUDAMESSAGELIST_H_
