
.. _program_listing_file_include_flamegpu_runtime_messaging_Array_ArrayHost.h:

Program Listing for File ArrayHost.h
====================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_flamegpu_runtime_messaging_Array_ArrayHost.h>` (``include/flamegpu/runtime/messaging/Array/ArrayHost.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef INCLUDE_FLAMEGPU_RUNTIME_MESSAGING_ARRAY_ARRAYHOST_H_
   #define INCLUDE_FLAMEGPU_RUNTIME_MESSAGING_ARRAY_ARRAYHOST_H_
   
   #include <string>
   #include <memory>
   
   #include "flamegpu/model/Variable.h"
   #include "flamegpu/runtime/messaging/Array.h"
   #include "flamegpu/runtime/messaging/BruteForce/BruteForceHost.h"
   
   
   class MsgArray::CUDAModelHandler : public MsgSpecialisationHandler {
    public:
        explicit CUDAModelHandler(CUDAMessage &a);
       ~CUDAModelHandler() { }
       void init(CUDAScatter &scatter, const unsigned int &streamId) override;
       void buildIndex(CUDAScatter &scatter, const unsigned int &streamId, const cudaStream_t &stream) override;
       void allocateMetaDataDevicePtr() override;
       void freeMetaDataDevicePtr() override;
       const void *getMetaDataDevicePtr() const override { return d_metadata; }
   
    private:
       MetaData hd_metadata;
       MetaData *d_metadata;
       CUDAMessage &sim_message;
       unsigned int *d_write_flag;
       size_type d_write_flag_len;
   };
   
   struct MsgArray::Data : public MsgBruteForce::Data {
       friend class ModelDescription;
       friend struct ModelData;
       size_type length;
       virtual ~Data() = default;
   
       std::unique_ptr<MsgSpecialisationHandler> getSpecialisationHander(CUDAMessage &owner) const override;
   
       std::type_index getType() const override;
   
    protected:
       Data *clone(const std::shared_ptr<const ModelData> &newParent) override;
       Data(const std::shared_ptr<const ModelData>&, const Data &other);
       Data(const std::shared_ptr<const ModelData>&, const std::string &message_name);
   };
   
   class MsgArray::Description : public MsgBruteForce::Description {
       friend struct MsgArray::Data;
   
    protected:
       Description(const std::shared_ptr<const ModelData>&_model, Data *const data);
       Description(const Description &other_message) = delete;
       Description(Description &&other_message) noexcept = delete;
       Description& operator=(const Description &other_message) = delete;
       Description& operator=(Description &&other_message) noexcept = delete;
   
    public:
       void setLength(const size_type &len);
   
       size_type getLength() const;
   };
   
   #endif  // INCLUDE_FLAMEGPU_RUNTIME_MESSAGING_ARRAY_ARRAYHOST_H_
