
.. _program_listing_file_include_flamegpu_io_statereader.h:

Program Listing for File statereader.h
======================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_flamegpu_io_statereader.h>` (``include/flamegpu/io/statereader.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef INCLUDE_FLAMEGPU_IO_STATEREADER_H_
   #define INCLUDE_FLAMEGPU_IO_STATEREADER_H_
   
   #include <memory>
   #include <string>
   #include <unordered_map>
   #include <utility>
   
   #include "flamegpu/model/ModelDescription.h"
   #include "flamegpu/util/StringPair.h"
   
   class AgentVector;
   
   // Base class
   class StateReader {
    public:
       StateReader(
           const std::string& _model_name,
           const std::unordered_map<std::string, EnvironmentDescription::PropData>& _env_desc,
           std::unordered_map<std::pair<std::string, unsigned int>, Any>& _env_init,
           StringPairUnorderedMap<std::shared_ptr<AgentVector>>& _model_state,
           const std::string& input,
           Simulation* _sim_instance)
       : model_state(_model_state)
       , inputFile(input)
       , model_name(_model_name)
       , env_desc(_env_desc)
       , env_init(_env_init)
       , sim_instance(_sim_instance) {}
       ~StateReader() {}
   
       // -----------------------------------------------------------------------
       //  The interface
       // -----------------------------------------------------------------------
       virtual int parse() = 0;
   
       // void setFileName(const char* input) {    inputFile = std::string(input); }
   
       // void setModelDesc(const ModelDescription &model_desc) {    model_description_ = model_desc; }
   /*
       StateReader& create(const ModelDescription &model, const char *input) {
           string extension = getFileExt(input);
           StateReader *object_to_return = nullptr;
   
           if (extension == "xml") {
               object_to_return = new xmlReader(model);
           }
           if (extension == "bin") {
               object_to_return = new binReader(model);
           }
   
           return *object_to_return;
       }
   */
   
    protected:
       StringPairUnorderedMap<std::shared_ptr<AgentVector>>& model_state;
       std::string inputFile;
       const std::string model_name;
       const std::unordered_map<std::string, EnvironmentDescription::PropData> &env_desc;
       std::unordered_map<std::pair<std::string, unsigned int>, Any> &env_init;
       Simulation *sim_instance;
   };
   
   #endif  // INCLUDE_FLAMEGPU_IO_STATEREADER_H_
