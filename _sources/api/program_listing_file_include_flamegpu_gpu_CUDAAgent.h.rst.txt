
.. _program_listing_file_include_flamegpu_gpu_CUDAAgent.h:

Program Listing for File CUDAAgent.h
====================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_flamegpu_gpu_CUDAAgent.h>` (``include/flamegpu/gpu/CUDAAgent.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef INCLUDE_FLAMEGPU_GPU_CUDAAGENT_H_
   #define INCLUDE_FLAMEGPU_GPU_CUDAAGENT_H_
   
   #include <memory>
   #include <map>
   #include <utility>
   #include <string>
   #include <mutex>
   #include <unordered_map>
   #include <list>
   
   // include sub classes
   #include "flamegpu/util/JitifyCache.h"
   #include "flamegpu/gpu/CUDAAgentStateList.h"
   #include "flamegpu/model/AgentFunctionData.h"
   #include "flamegpu/model/SubAgentData.h"
   #include "flamegpu/runtime/cuRVE/curve_rtc.h"
   #include "flamegpu/sim/AgentInterface.h"
   
   class CUDAScatter;
   class CUDAFatAgent;
   struct VarOffsetStruct;
   class CUDAAgent : public AgentInterface {
       friend class AgentVis;
   
    public:
        typedef std::map<const std::string, std::unique_ptr<jitify::experimental::KernelInstantiation>> CUDARTCFuncMap;
        typedef std::map<const std::string, std::unique_ptr<CurveRTCHost>> CUDARTCHeaderMap;
       typedef std::pair<const std::string, std::unique_ptr<jitify::experimental::KernelInstantiation>> CUDARTCFuncMapPair;
       CUDAAgent(const AgentData& description, const CUDASimulation &_cuda_model);
       CUDAAgent(
           const AgentData &description,
           const CUDASimulation &_cuda_model,
           const std::unique_ptr<CUDAAgent> &master_agent,
           const std::shared_ptr<SubAgentData> &mapping);
       void mapRuntimeVariables(const AgentFunctionData& func, const unsigned int &instance_id) const;
       void unmapRuntimeVariables(const AgentFunctionData& func, const unsigned int &instance_id) const;
       void setPopulationData(const AgentVector& population, const std::string &state_name, CUDAScatter &scatter, const unsigned int &streamId, const cudaStream_t& stream);
       void getPopulationData(AgentVector& population, const std::string& state_name) const;
       unsigned int getStateSize(const std::string &state) const;
       unsigned int getStateAllocatedSize(const std::string &state) const;
       const AgentData &getAgentDescription() const;
       void *getStateVariablePtr(const std::string &state_name, const std::string &variable_name);
       void processDeath(const AgentFunctionData& func, CUDAScatter &scatter, const unsigned int &streamId, const cudaStream_t &stream);
       void transitionState(const std::string &_src, const std::string &_dest, CUDAScatter &scatter, const unsigned int &streamId, const cudaStream_t &stream);
       void processFunctionCondition(const AgentFunctionData& func, CUDAScatter &scatter, const unsigned int &streamId, const cudaStream_t &stream);
       void scatterHostCreation(const std::string &state_name, const unsigned int &newSize, char *const d_inBuff, const VarOffsetStruct &offsets, CUDAScatter &scatter, const unsigned int &streamId, const cudaStream_t &stream);
       void scatterSort(const std::string &state_name, CUDAScatter &scatter, const unsigned int &streamId, const cudaStream_t &stream);
       void mapNewRuntimeVariables(const CUDAAgent& func_agent, const AgentFunctionData& func, const unsigned int &maxLen, CUDAScatter &scatter, const unsigned int &instance_id, const unsigned int &streamId);
       void unmapNewRuntimeVariables(const AgentFunctionData& func, const unsigned int &instance_id);
       void scatterNew(const AgentFunctionData& func, const unsigned int &newSize, CUDAScatter &scatter, const unsigned int &streamId, const cudaStream_t &stream);
       void clearFunctionCondition(const std::string &state);
       void addInstantitateRTCFunction(const AgentFunctionData& func, bool function_condition = false);
       const jitify::experimental::KernelInstantiation& getRTCInstantiation(const std::string &function_name) const;
       CurveRTCHost &getRTCHeader(const std::string &function_name) const;
       const CUDARTCFuncMap& getRTCFunctions() const;
       void initUnmappedVars(CUDAScatter& scatter, const unsigned int& streamId, const cudaStream_t& stream);
       void initExcludedVars(const std::string& state, const unsigned int& count, const unsigned int& offset, CUDAScatter& scatter, const unsigned int& streamId, const cudaStream_t& stream);
       void cullAllStates();
       void cullUnmappedStates();
       void resizeState(const std::string &state, const unsigned int& minSize, const bool& retainData);
       void setStateAgentCount(const std::string& state, const unsigned int &newSize);
       std::list<std::shared_ptr<VariableBuffer>> getUnboundVariableBuffers(const std::string& state);
   
    private:
       static size_t calcTotalVarSize(const AgentData &agent) {
           size_t rtn = 0;
           for (const auto v : agent.variables) {
               rtn += v.second.type_size * v.second.elements;
           }
           return rtn;
       }
       unsigned int getFatIndex() const { return fat_index; }
       std::shared_ptr<CUDAFatAgent> getFatAgent() { return fat_agent; }
       const AgentData &agent_description;
       std::unordered_map<std::string, std::shared_ptr<CUDAAgentStateList>> state_map;
       std::shared_ptr<CUDAFatAgent> fat_agent;
       const unsigned int fat_index;
       const CUDASimulation &cuda_model;
       CUDARTCFuncMap rtc_func_map;
       CUDARTCHeaderMap rtc_header_map;
       const size_t TOTAL_AGENT_VARIABLE_SIZE;
       std::unordered_map<std::string, void*> newBuffs;
       std::mutex newBuffsMutex;
   };
   
   #endif  // INCLUDE_FLAMEGPU_GPU_CUDAAGENT_H_
