
.. _program_listing_file_include_flamegpu_sim_SimRunner.h:

Program Listing for File SimRunner.h
====================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_flamegpu_sim_SimRunner.h>` (``include/flamegpu/sim/SimRunner.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef INCLUDE_FLAMEGPU_SIM_SIMRUNNER_H_
   #define INCLUDE_FLAMEGPU_SIM_SIMRUNNER_H_
   
   #include <atomic>
   #include <memory>
   #include <mutex>
   #include <queue>
   #include <condition_variable>
   #include <thread>
   #include <vector>
   #include <string>
   #include "flamegpu/sim/LogFrame.h"
   
   namespace flamegpu {
   
   struct ModelData;
   class LoggingConfig;
   class StepLoggingConfig;
   class RunPlanVector;
   
   class SimRunner {
       friend class CUDAEnsemble;
       struct ErrorDetail {
           unsigned int run_id;
           unsigned int device_id;
           unsigned int runner_id;
           std::string exception_string;
       };
       SimRunner(const std::shared_ptr<const ModelData> _model,
           std::atomic<unsigned int> &_err_ct,
           std::atomic<unsigned int> &_next_run,
           const RunPlanVector &_plans,
           std::shared_ptr<const StepLoggingConfig> _step_log_config,
           std::shared_ptr<const LoggingConfig> _exit_log_config,
           int _device_id,
           unsigned int _runner_id,
           bool _verbose,
           bool _fail_fast,
           std::vector<RunLog> &run_logs,
           std::queue<unsigned int> &log_export_queue,
           std::mutex &log_export_queue_mutex,
           std::condition_variable &log_export_queue_cdn,
           ErrorDetail &fast_err_detail);
       const std::shared_ptr<const ModelData> model;
       unsigned int run_id;
       const int device_id;
       const unsigned int runner_id;
       const bool verbose;
       const bool fail_fast;
       std::thread thread;
       void start();
       // External references
       std::atomic<unsigned int> &err_ct;
       std::atomic<unsigned int> &next_run;
       const RunPlanVector &plans;
       const std::shared_ptr<const StepLoggingConfig> step_log_config;
       const std::shared_ptr<const LoggingConfig> exit_log_config;
       std::vector<RunLog> &run_logs;
       std::queue<unsigned int> &log_export_queue;
       std::mutex &log_export_queue_mutex;
       std::condition_variable &log_export_queue_cdn;
       ErrorDetail& fast_err_detail;
   };
   
   }  // namespace flamegpu
   
   #endif  // INCLUDE_FLAMEGPU_SIM_SIMRUNNER_H_
