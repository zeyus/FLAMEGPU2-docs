
.. _program_listing_file_include_flamegpu_runtime_messaging_BruteForce_BruteForceDevice.h:

Program Listing for File BruteForceDevice.h
===========================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_flamegpu_runtime_messaging_BruteForce_BruteForceDevice.h>` (``include/flamegpu/runtime/messaging/BruteForce/BruteForceDevice.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef INCLUDE_FLAMEGPU_RUNTIME_MESSAGING_BRUTEFORCE_BRUTEFORCEDEVICE_H_
   #define INCLUDE_FLAMEGPU_RUNTIME_MESSAGING_BRUTEFORCE_BRUTEFORCEDEVICE_H_
   
   #include "flamegpu/runtime/messaging/None.h"
   #include "flamegpu/runtime/messaging/BruteForce.h"
   
   struct ModelData;
   
   class MsgBruteForce::In {
    public:
       class Message;      // Forward declare inner classes
       class iterator;     // Forward declare inner classes
   
       __device__ In(Curve::NamespaceHash agentfn_hash, Curve::NamespaceHash msg_hash, const void *metadata)
           : combined_hash(agentfn_hash + msg_hash)
           , len(reinterpret_cast<const MetaData*>(metadata)->length)
       { }
       __device__ size_type size(void) const {
           return len;
       }
       __device__ iterator begin(void) const {  // const
           return iterator(*this, 0);
       }
       __device__ iterator end(void) const  {  // const
           // If there can be many begin, each with diff end, we need a middle layer to host the iterator/s
           return iterator(*this, len);
       }
   
       class Message {
           const MsgBruteForce::In &_parent;
           size_type index;
   
        public:
           __device__ Message(const MsgBruteForce::In &parent) : _parent(parent), index(0) {}
           __device__ Message(const MsgBruteForce::In &parent, size_type index) : _parent(parent), index(index) {}
           __host__ __device__ bool operator==(const Message& rhs) const { return  this->getIndex() == rhs.getIndex(); }
           __host__ __device__ bool operator!=(const Message& rhs) const { return  this->getIndex() != rhs.getIndex(); }
           __host__ __device__ Message& operator++() { ++index;  return *this; }
           __host__ __device__ size_type getIndex() const { return this->index; }
           template<typename T, size_type N>
           __device__ T getVariable(const char(&variable_name)[N]) const;
       };
   
       class iterator{  // : public std::iterator <std::random_access_iterator_tag, void, void, void, void> {
            Message _message;
   
        public:
           __device__ iterator(const In &parent, size_type index) : _message(parent, index) {}
           __device__ iterator& operator++() { ++_message;  return *this; }
           __device__ bool operator==(const iterator& rhs) const { return  _message == rhs._message; }
           __device__ bool operator!=(const iterator& rhs) const { return  _message != rhs._message; }
           __device__  Message& operator*() { return _message; }
       };
   
    private:
       Curve::NamespaceHash combined_hash;
       size_type len;
   };
   
   
   
   class MsgBruteForce::Out {
    public:
       __device__ Out(Curve::NamespaceHash agentfn_hash, Curve::NamespaceHash msg_hash, const void *, unsigned int *scan_flag_messageOutput)
           : combined_hash(agentfn_hash + msg_hash)
           , scan_flag(scan_flag_messageOutput)
       { }
       template<typename T, unsigned int N>
       __device__ void setVariable(const char(&variable_name)[N], T value) const;
   
    protected:
       Curve::NamespaceHash combined_hash;
       unsigned int *scan_flag;
   };
   
   template<typename T, unsigned int N>
   __device__ T MsgBruteForce::In::Message::getVariable(const char(&variable_name)[N]) const {
   #if !defined(SEATBELTS) || SEATBELTS
       // Ensure that the message is within bounds.
       if (index >= this->_parent.len) {
           DTHROW("Brute force message index exceeds messagelist length, unable to get variable '%s'.\n", variable_name);
           return static_cast<T>(0);
       }
   #endif
       // get the value from curve using the stored hashes and message index.
       T value = Curve::getMessageVariable_ldg<T>(variable_name, this->_parent.combined_hash, index);
       return value;
   }
   
   template<typename T, unsigned int N>
   __device__ void MsgBruteForce::Out::setVariable(const char(&variable_name)[N], T value) const {  // message name or variable name
       if (variable_name[0] == '_') {
           return;  // Fail silently
       }
       unsigned int index = (blockDim.x * blockIdx.x) + threadIdx.x;  // + d_message_count;
   
       // Todo: checking if the output message type is single or optional?  (d_message_type)
   
       // set the variable using curve
       Curve::setMessageVariable<T>(variable_name, combined_hash, value, index);
   
       // Set scan flag incase the message is optional
       this->scan_flag[index] = 1;
   }
   
   #endif  // INCLUDE_FLAMEGPU_RUNTIME_MESSAGING_BRUTEFORCE_BRUTEFORCEDEVICE_H_
