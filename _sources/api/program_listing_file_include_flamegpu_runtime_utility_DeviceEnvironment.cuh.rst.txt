
.. _program_listing_file_include_flamegpu_runtime_utility_DeviceEnvironment.cuh:

Program Listing for File DeviceEnvironment.cuh
==============================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_flamegpu_runtime_utility_DeviceEnvironment.cuh>` (``include/flamegpu/runtime/utility/DeviceEnvironment.cuh``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef INCLUDE_FLAMEGPU_RUNTIME_UTILITY_DEVICEENVIRONMENT_CUH_
   #define INCLUDE_FLAMEGPU_RUNTIME_UTILITY_DEVICEENVIRONMENT_CUH_
   
   // #include <cuda_runtime.h>
   #include <cstdint>
   #include <string>
   #include <cassert>
   
   #ifndef __CUDACC_RTC__
   namespace flamegpu_internal {
       extern __constant__ char c_envPropBuffer[EnvironmentManager::MAX_BUFFER_SIZE];
   }  // namespace flamegpu_internal
   #endif
   
   class DeviceEnvironment {
       friend class FLAMEGPU_READ_ONLY_DEVICE_API;
       friend class EnvironmentManager;
       __host__ __device__ static constexpr unsigned int CURVE_NAMESPACE_HASH() { return 0X1428F902u; }
       const Curve::NamespaceHash &modelname_hash;
       __device__ __forceinline__ DeviceEnvironment(const Curve::NamespaceHash &_modelname_hash)
           : modelname_hash(_modelname_hash) { }
   
    public:
       template<typename T, unsigned int N>
       __device__ __forceinline__ T getProperty(const char(&name)[N]) const;
       template<typename T, unsigned int N>
       __device__ __forceinline__ T getProperty(const char(&name)[N], const unsigned int&index) const;
       template<unsigned int N>
       __device__ __forceinline__ bool containsProperty(const char(&name)[N]) const;
   };
   
   // Mash compilation of these functions from RTC builds as this requires a dynamic implementation of the function in curve_rtc
   #ifndef __CUDACC_RTC__
   
   template<typename T, unsigned int N>
   __device__ __forceinline__ T DeviceEnvironment::getProperty(const char(&name)[N]) const {
       Curve::VariableHash cvh = CURVE_NAMESPACE_HASH() + modelname_hash + Curve::variableHash(name);
       const auto cv = Curve::getVariable(cvh);
   #if !defined(SEATBELTS) || SEATBELTS
       if (cv ==  Curve::UNKNOWN_VARIABLE) {
           DTHROW("Environment property with name: %s was not found.\n", name);
       } else if (curve_internal::d_sizes[cv] != sizeof(T)) {
           DTHROW("Environment property with name: %s type size mismatch %llu != %llu.\n", name, curve_internal::d_sizes[cv], sizeof(T));
       } else {
           return *reinterpret_cast<T*>(flamegpu_internal::c_envPropBuffer + reinterpret_cast<ptrdiff_t>(curve_internal::d_variables[cv]));
       }
       return {};
   #else
       return *reinterpret_cast<T*>(flamegpu_internal::c_envPropBuffer + reinterpret_cast<ptrdiff_t>(curve_internal::d_variables[cv]));
   #endif
   }
   template<typename T, unsigned int N>
   __device__ __forceinline__ T DeviceEnvironment::getProperty(const char(&name)[N], const unsigned int &index) const {
       Curve::VariableHash cvh = CURVE_NAMESPACE_HASH() + modelname_hash + Curve::variableHash(name);
       const auto cv = Curve::getVariable(cvh);
   #if !defined(SEATBELTS) || SEATBELTS
       if (cv ==  Curve::UNKNOWN_VARIABLE) {
           DTHROW("Environment property array with name: %s was not found.\n", name);
       } else if (curve_internal::d_sizes[cv] != sizeof(T)) {
           DTHROW("Environment property array with name: %s type size mismatch %llu != %llu.\n", name, curve_internal::d_sizes[cv], sizeof(T));
       } else if (curve_internal::d_lengths[cv] <= index) {
           DTHROW("Environment property array with name: %s index %u is out of bounds (length %u).\n", name, index, curve_internal::d_lengths[cv]);
       } else {
           return *(reinterpret_cast<T*>(flamegpu_internal::c_envPropBuffer + reinterpret_cast<ptrdiff_t>(curve_internal::d_variables[cv])) + index);
       }
       return {};
   #else
       return *(reinterpret_cast<T*>(flamegpu_internal::c_envPropBuffer + reinterpret_cast<ptrdiff_t>(curve_internal::d_variables[cv])) + index);
   #endif
   }
   
   template<unsigned int N>
   __device__ __forceinline__ bool DeviceEnvironment::containsProperty(const char(&name)[N]) const {
       Curve::VariableHash cvh = CURVE_NAMESPACE_HASH() + modelname_hash + Curve::variableHash(name);
       return Curve::getVariable(cvh) != Curve::UNKNOWN_VARIABLE;
   }
   
   #endif  // __CUDACC_RTC__
   
   #endif  // INCLUDE_FLAMEGPU_RUNTIME_UTILITY_DEVICEENVIRONMENT_CUH_
